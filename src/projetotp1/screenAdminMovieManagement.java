package projetotp1;

import classes.Filme;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

// Classe do componente de administração de filmes do admin
public class screenAdminMovieManagement extends javax.swing.JFrame {

  // Array de filmes
  static ArrayList<Filme> listaDeFilmes;

  public screenAdminMovieManagement() {
    initComponents();

    listaDeFilmes = new ArrayList();

    editButton.setEnabled(false);
    deleteButton.setEnabled(false);

    pegarFilmesDoArquivo();
    carregarTabelaFilmes();
  }

  // Método responsável por carregar a tabela de filmes
  private void carregarTabelaFilmes() {
    DefaultTableModel modelo = new DefaultTableModel(new Object[]{"Movie Title", "Genre", "Launch Date", "Rating"}, 0);

    for (int i = 0; i < listaDeFilmes.size(); i++) {
      Object linha[] = new Object[]{
        listaDeFilmes.get(i).getTitulo(),
        listaDeFilmes.get(i).getGenero(),
        listaDeFilmes.get(i).getAnoDeLancamento(),
        listaDeFilmes.get(i).getRating()
      };
      modelo.addRow(linha);
    }

    moviesTable.setModel(modelo);
  }

  // Método responsável por coletar os filmes do arquivo
  public static void pegarFilmesDoArquivo() {
    try (BufferedReader buffRead = new BufferedReader(new FileReader("movies.txt"))) {
      String linha;
      String[] dados;

      String title;
      String genre;
      int launchDate;
      int rating;

      while (true) {
        linha = buffRead.readLine();
        if (linha != null) {
          dados = linha.split(";");
          title = dados[0];
          genre = dados[1];
          launchDate = Integer.parseInt(dados[2]);
          rating = Integer.parseInt(dados[3]);

          Filme filme = new Filme(title, genre, launchDate, rating);

          listaDeFilmes.add(filme);
        } else {
          break;
        }
      }

      buffRead.close();

    } catch (IOException erro) {
      System.out.println(erro.getMessage());

      JOptionPane.showMessageDialog(null, "Não foi possível obter informações dos filmes!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
    }
  }

  // Método responsável por deletar o arquivo
  public static void apagarArquivo() throws IOException {
    File arquivo = new File("movies.txt");

    arquivo.delete();
  }

  // Método responsável por regravar o arquivo com os dados modificados
  public static void regravarArquivo() throws IOException {
    String title;
    String genre;
    int launchDate;
    int rating;

    apagarArquivo();

    for (int i = 0; i < listaDeFilmes.size(); i++) {
      Filme filme = listaDeFilmes.get(i);
      title = filme.getTitulo();
      genre = filme.getGenero();
      launchDate = filme.getAnoDeLancamento();
      rating = filme.getRating();

      try {
        try (BufferedWriter buffWrite = new BufferedWriter(new FileWriter("movies.txt", true))) {
          buffWrite.append(title + ";" + genre + ";" + launchDate + ";" + rating + "\n");
          buffWrite.close();
        }
      } catch (IOException erro) {
        System.out.println(erro.getMessage());
        JOptionPane.showMessageDialog(null, "Não foi possível salvar os filmes!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dashboard = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        moviesTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        movieTitleLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        launchDateLabel = new javax.swing.JLabel();
        ratingLabel = new javax.swing.JLabel();
        inputMovieTitle = new javax.swing.JTextField();
        pageIcon = new javax.swing.JLabel();
        inputGenre = new javax.swing.JSpinner();
        inputLaunchDate = new javax.swing.JSpinner();
        inputRating = new javax.swing.JSpinner();
        menu = new javax.swing.JPanel();
        leftRegion = new javax.swing.JPanel();
        backIcon = new javax.swing.JLabel();
        rightRegion = new javax.swing.JPanel();
        exitIcon1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(850, 550));
        setSize(new java.awt.Dimension(850, 550));

        dashboard.setBackground(new java.awt.Color(1, 21, 38));
        dashboard.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(150, 179, 217), null), "MOVIES MANAGEMENT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambay Devanagari", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        dashboard.setPreferredSize(new java.awt.Dimension(800, 425));

        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        moviesTable.setBackground(new java.awt.Color(1, 21, 38));
        moviesTable.setForeground(new java.awt.Color(255, 255, 255));
        moviesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Inception", "Sci-fi", "2010", "10"},
                {"Matrix", "Sci-fi", "1999", "10"},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MOVIE TITLE", "GENRE", "LAUNCH DATE", "RATING"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        moviesTable.setColumnSelectionAllowed(true);
        moviesTable.setGridColor(new java.awt.Color(1, 21, 38));
        moviesTable.setPreferredSize(new java.awt.Dimension(225, 640));
        moviesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moviesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(moviesTable);
        moviesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (moviesTable.getColumnModel().getColumnCount() > 0) {
            moviesTable.getColumnModel().getColumn(0).setResizable(false);
            moviesTable.getColumnModel().getColumn(1).setResizable(false);
            moviesTable.getColumnModel().getColumn(2).setResizable(false);
        }

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        addButton.setContentAreaFilled(false);
        addButton.setFocusPainted(false);
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit (1).png"))); // NOI18N
        editButton.setContentAreaFilled(false);
        editButton.setFocusTraversalKeysEnabled(false);
        editButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editButtonMouseClicked(evt);
            }
        });
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        deleteButton.setContentAreaFilled(false);
        deleteButton.setFocusPainted(false);
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        movieTitleLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        movieTitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        movieTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        movieTitleLabel.setText("MOVIE TEATER");

        genreLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        genreLabel.setForeground(new java.awt.Color(255, 255, 255));
        genreLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        genreLabel.setText("GENRE");

        launchDateLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        launchDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        launchDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        launchDateLabel.setText("LAUNCH YEAR");

        ratingLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        ratingLabel.setForeground(new java.awt.Color(255, 255, 255));
        ratingLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ratingLabel.setText("RATING");

        pageIcon.setForeground(new java.awt.Color(255, 255, 255));
        pageIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pageIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/film-reel (1).png"))); // NOI18N
        pageIcon.setPreferredSize(new java.awt.Dimension(128, 128));

        inputGenre.setModel(new javax.swing.SpinnerListModel(new String[] {"Action", "Adventure", "Sci-fi", "Drama", "Terror", "Comedy"}));

        inputLaunchDate.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(1980L), Long.valueOf(1980L), Long.valueOf(2020L), Long.valueOf(1L)));

        inputRating.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        javax.swing.GroupLayout dashboardLayout = new javax.swing.GroupLayout(dashboard);
        dashboard.setLayout(dashboardLayout);
        dashboardLayout.setHorizontalGroup(
            dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboardLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dashboardLayout.createSequentialGroup()
                        .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dashboardLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ratingLabel)
                                    .addComponent(launchDateLabel)
                                    .addComponent(genreLabel)))
                            .addGroup(dashboardLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(movieTitleLabel)))
                        .addGap(159, 159, 159))
                    .addGroup(dashboardLayout.createSequentialGroup()
                        .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(inputMovieTitle)
                            .addComponent(inputGenre)
                            .addComponent(inputLaunchDate)
                            .addComponent(inputRating)
                            .addGroup(dashboardLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(deleteButton)
                                .addGap(18, 18, 18)
                                .addComponent(editButton)
                                .addGap(18, 18, 18)
                                .addComponent(addButton)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dashboardLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(pageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(77, 77, 77)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dashboardLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, deleteButton, editButton});

        dashboardLayout.setVerticalGroup(
            dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboardLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(dashboardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movieTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputMovieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(genreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(launchDateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputLaunchDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ratingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        getContentPane().add(dashboard, java.awt.BorderLayout.CENTER);

        menu.setBackground(new java.awt.Color(1, 21, 38));
        menu.setPreferredSize(new java.awt.Dimension(800, 50));
        menu.setLayout(new java.awt.BorderLayout());

        leftRegion.setBackground(new java.awt.Color(1, 21, 38));
        leftRegion.setPreferredSize(new java.awt.Dimension(50, 50));

        backIcon.setForeground(new java.awt.Color(255, 255, 255));
        backIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left-arrow.png"))); // NOI18N
        backIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backIconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout leftRegionLayout = new javax.swing.GroupLayout(leftRegion);
        leftRegion.setLayout(leftRegionLayout);
        leftRegionLayout.setHorizontalGroup(
            leftRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftRegionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        leftRegionLayout.setVerticalGroup(
            leftRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftRegionLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(backIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu.add(leftRegion, java.awt.BorderLayout.LINE_START);

        rightRegion.setBackground(new java.awt.Color(1, 21, 38));
        rightRegion.setPreferredSize(new java.awt.Dimension(50, 50));

        exitIcon1.setForeground(new java.awt.Color(255, 255, 255));
        exitIcon1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout.png"))); // NOI18N
        exitIcon1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitIcon1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout rightRegionLayout = new javax.swing.GroupLayout(rightRegion);
        rightRegion.setLayout(rightRegionLayout);
        rightRegionLayout.setHorizontalGroup(
            rightRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightRegionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitIcon1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rightRegionLayout.setVerticalGroup(
            rightRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightRegionLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(exitIcon1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu.add(rightRegion, java.awt.BorderLayout.LINE_END);

        getContentPane().add(menu, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backIconMouseClicked
      // TODO add your handling code here:
      this.setVisible(false);
      new screenAdminMenu().setVisible(true);
    }//GEN-LAST:event_backIconMouseClicked

    private void exitIcon1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitIcon1MouseClicked
      // TODO add your handling code here:
      this.setVisible(false);
      new screenLogin().setVisible(true);
    }//GEN-LAST:event_exitIcon1MouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed

  private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
    if (inputMovieTitle.getText().equals("")) {
      JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
    } else {
      String title = inputMovieTitle.getText();
      String genre = inputGenre.getValue().toString();
      int launchDate = Integer.parseInt(inputLaunchDate.getValue().toString());
      int rating = Integer.parseInt(inputRating.getValue().toString());

      try (BufferedReader buffRead = new BufferedReader(new FileReader("movies.txt"))) {
        String linha;
        String[] dados;

        while (true) {
          linha = buffRead.readLine();
          if (linha != null) {
            dados = linha.split(";");

            if (dados[0].equals(title)) {
              JOptionPane.showMessageDialog(null, "Filme já existe!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
              return;
            }
          } else {
            break;
          }
        }

        buffRead.close();

      } catch (IOException erro) {
        System.out.println(erro.getMessage());

        JOptionPane.showMessageDialog(null, "Não foi possível obter informações dos filmes!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
      }

      listaDeFilmes.add(new Filme(title, genre, launchDate, rating));
      JOptionPane.showMessageDialog(null, "Filme cadastrado com sucesso!", "Mensagem", JOptionPane.PLAIN_MESSAGE);

      carregarTabelaFilmes();
      try {
        regravarArquivo();
      } catch (IOException erro) {
//          Logger.getLogger(screenAdminUserManagement.class.getName()).log(Level.SEVERE, null, ex);
      }

      inputMovieTitle.setText("");
    }
  }//GEN-LAST:event_addButtonMouseClicked

  private void editButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseClicked
    // TODO add your handling code here:
    if (inputMovieTitle.getText().equals("")) {
      JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
    } else {
      String title = inputMovieTitle.getText();
      String genre = inputGenre.getValue().toString();
      int launchDate = Integer.parseInt(inputLaunchDate.getValue().toString());
      int rating = Integer.parseInt(inputRating.getValue().toString());

      int index = moviesTable.getSelectedRow();

      listaDeFilmes.get(index).setTitulo(title);
      listaDeFilmes.get(index).setGenero(genre);
      listaDeFilmes.get(index).setAnoDeLancamento(launchDate);
      listaDeFilmes.get(index).setRating(rating);

      JOptionPane.showMessageDialog(null, "Edição realizada com sucesso!", "Mensagem", JOptionPane.PLAIN_MESSAGE);

      carregarTabelaFilmes();

      try {
        regravarArquivo();
      } catch (IOException erro) {
        System.out.println(erro.getMessage());
        JOptionPane.showMessageDialog(null, "Não foi possível salvar as modificações!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
      }

      editButton.setEnabled(false);
      deleteButton.setEnabled(false);
    }
  }//GEN-LAST:event_editButtonMouseClicked

  private void moviesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moviesTableMouseClicked
    int i = moviesTable.getSelectedRow();

    if (i >= 0 && i < listaDeFilmes.size()) {
      Filme filme = listaDeFilmes.get(i);
      inputMovieTitle.setText(filme.getTitulo());
      inputGenre.setValue(filme.getGenero());
      inputLaunchDate.setValue(filme.getAnoDeLancamento());
      inputRating.setValue(filme.getRating());
    }

    addButton.setEnabled(true);
    editButton.setEnabled(true);
    deleteButton.setEnabled(true);
  }//GEN-LAST:event_moviesTableMouseClicked

  private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
    int index = moviesTable.getSelectedRow();

    if (index >= 0 && index < listaDeFilmes.size()) {
      listaDeFilmes.remove(index);
      JOptionPane.showMessageDialog(null, "Remoção realizada com sucesso!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
    }

    carregarTabelaFilmes();

    editButton.setEnabled(false);
    deleteButton.setEnabled(false);

    try {
      regravarArquivo();
    } catch (IOException erro) {
      System.out.println(erro.getMessage());
      JOptionPane.showMessageDialog(null, "Não foi possível salvar as modificações!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
    }
  }//GEN-LAST:event_deleteButtonMouseClicked

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(screenAdminMovieManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(screenAdminMovieManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(screenAdminMovieManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(screenAdminMovieManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(() -> {
      new screenAdminMovieManagement().setVisible(true);
    });
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel backIcon;
    private javax.swing.JPanel dashboard;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel exitIcon1;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JSpinner inputGenre;
    private javax.swing.JSpinner inputLaunchDate;
    private javax.swing.JTextField inputMovieTitle;
    private javax.swing.JSpinner inputRating;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel launchDateLabel;
    private javax.swing.JPanel leftRegion;
    private javax.swing.JPanel menu;
    private javax.swing.JLabel movieTitleLabel;
    private javax.swing.JTable moviesTable;
    private javax.swing.JLabel pageIcon;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JPanel rightRegion;
    // End of variables declaration//GEN-END:variables
}
