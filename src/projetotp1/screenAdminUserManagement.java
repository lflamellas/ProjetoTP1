package projetotp1;

import classes.Usuario;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

// Classe do componente de administração de usuários do admin
public class screenAdminUserManagement extends javax.swing.JFrame {

  // Lista de usuários
  static ArrayList<Usuario> listaDeUsuarios;

  public screenAdminUserManagement() {
    initComponents();

    listaDeUsuarios = new ArrayList();

    editButton.setEnabled(false);
    deleteButton.setEnabled(false);

    pegarUsuariosDoArquivo();
    carregarTabelaUsuarios();
  }

  // Método responsável por carregar a tabela de usuários
  private void carregarTabelaUsuarios() {
    DefaultTableModel modelo = new DefaultTableModel(new Object[]{"Usename", "E-mail", "Register Date"}, 0);

    for (int i = 0; i < listaDeUsuarios.size(); i++) {
      Object linha[] = new Object[]{
        listaDeUsuarios.get(i).getUsername(),
        listaDeUsuarios.get(i).getEmail(),
        listaDeUsuarios.get(i).getDataDeCriacao(),};
      modelo.addRow(linha);
    }

    usersTable.setModel(modelo);
  }

  // Método responsável por coletar dados do usuário do arquivo
  public static void pegarUsuariosDoArquivo() {
    try (BufferedReader buffRead = new BufferedReader(new FileReader("users.txt"))) {
      String linha;
      String[] dados;

      String username;
      String email;
      String password;
      Date dataDeCriacao;

      while (true) {
        linha = buffRead.readLine();
        if (linha != null) {
          dados = linha.split(";");
          username = dados[0];
          email = dados[1];
          password = dados[2];
          dataDeCriacao = new Date();
          dataDeCriacao.setTime(Long.parseLong(dados[3]));

          Usuario usuario = new Usuario(username, email, password, dataDeCriacao);

          listaDeUsuarios.add(usuario);
        } else {
          break;
        }
      }

      buffRead.close();

    } catch (IOException erro) {
      System.out.println(erro.getMessage());
      JOptionPane.showMessageDialog(null, "Não foi possível obter informações dos usuários!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
    }
  }

  // Método responsável por deletar o arquivo
  public static void apagarArquivo() throws IOException {
    File arquivo = new File("users.txt");

    arquivo.delete();
  }

  // Método responsável por regravar o arquivo com os dados modificados
  public static void regravarArquivo() throws IOException {
    String username;
    String email;
    String senha;
    Date dataDeCriacao;

    apagarArquivo();

    for (int i = 0; i < listaDeUsuarios.size(); i++) {
      Usuario user = listaDeUsuarios.get(i);
      username = user.getUsername();
      email = user.getEmail();
      senha = user.getPassword();
      dataDeCriacao = user.getDataDeCriacao();

      try {
        try (BufferedWriter buffWrite = new BufferedWriter(new FileWriter("users.txt", true))) {
          buffWrite.append(username + ";" + email + ";" + senha + ";" + dataDeCriacao.getTime() + "\n");
          buffWrite.close();
        }
      } catch (IOException erro) {
        System.out.println(erro.getMessage());
        JOptionPane.showMessageDialog(null, "Não foi possível salvar os usuários!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dashboard = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        inputUsername = new javax.swing.JTextField();
        inputEmail = new javax.swing.JTextField();
        inputPassword = new javax.swing.JPasswordField();
        inputConfirmPassword = new javax.swing.JPasswordField();
        usersIcon = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        leftRegion = new javax.swing.JPanel();
        backIcon = new javax.swing.JLabel();
        rightRegion = new javax.swing.JPanel();
        exitIcon1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(850, 550));
        setSize(new java.awt.Dimension(850, 550));

        dashboard.setBackground(new java.awt.Color(1, 21, 38));
        dashboard.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(150, 179, 217), null), "USERS MANAGEMENT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambay Devanagari", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        usersTable.setBackground(new java.awt.Color(1, 21, 38));
        usersTable.setForeground(new java.awt.Color(255, 255, 255));
        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Caio", "caio@unb.br", "25/11/2020"},
                {"Luis Fernando", "lf@unb.br", "25/11/2020"},
                {"Ana Linda", "ana@unb.br", "17/01/2002"},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "USERNAME", "EMAIL", "REGISTER DATE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        usersTable.setGridColor(new java.awt.Color(1, 21, 38));
        usersTable.setSelectionBackground(new java.awt.Color(150, 179, 217));
        usersTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        usersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(usersTable);
        if (usersTable.getColumnModel().getColumnCount() > 0) {
            usersTable.getColumnModel().getColumn(0).setResizable(false);
            usersTable.getColumnModel().getColumn(1).setResizable(false);
            usersTable.getColumnModel().getColumn(2).setResizable(false);
        }

        addButton.setBackground(new java.awt.Color(1, 21, 38));
        addButton.setFont(new java.awt.Font("Cambay Devanagari", 0, 16)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        addButton.setContentAreaFilled(false);
        addButton.setFocusPainted(false);
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setBackground(new java.awt.Color(39, 40, 64));
        editButton.setFont(new java.awt.Font("Cambay Devanagari", 0, 16)); // NOI18N
        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit (1).png"))); // NOI18N
        editButton.setContentAreaFilled(false);
        editButton.setFocusPainted(false);
        editButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editButtonMouseClicked(evt);
            }
        });
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(1, 21, 38));
        deleteButton.setFont(new java.awt.Font("Cambay Devanagari", 0, 16)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        deleteButton.setContentAreaFilled(false);
        deleteButton.setFocusPainted(false);
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        usernameLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        usernameLabel.setForeground(new java.awt.Color(255, 255, 255));
        usernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        usernameLabel.setText("USERNAME");

        emailLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        emailLabel.setText("EMAIL");

        passwordLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(255, 255, 255));
        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passwordLabel.setText("PASSWORD");

        confirmPasswordLabel.setFont(new java.awt.Font("Cambay Devanagari", 1, 14)); // NOI18N
        confirmPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        confirmPasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        confirmPasswordLabel.setText("CONFIRM PASSWORD");

        usersIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/customer.png"))); // NOI18N

        javax.swing.GroupLayout dashboardLayout = new javax.swing.GroupLayout(dashboard);
        dashboard.setLayout(dashboardLayout);
        dashboardLayout.setHorizontalGroup(
            dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboardLayout.createSequentialGroup()
                .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dashboardLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dashboardLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(usersIcon))
                            .addComponent(confirmPasswordLabel)
                            .addComponent(inputConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(emailLabel)
                                .addComponent(inputEmail)
                                .addComponent(usernameLabel)
                                .addComponent(passwordLabel)
                                .addComponent(inputPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                .addComponent(inputUsername))))
                    .addGroup(dashboardLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(deleteButton)
                        .addGap(18, 18, 18)
                        .addComponent(editButton)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dashboardLayout.setVerticalGroup(
            dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dashboardLayout.createSequentialGroup()
                .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dashboardLayout.createSequentialGroup()
                        .addComponent(usersIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(emailLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(confirmPasswordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(dashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addButton)
                                .addComponent(deleteButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(40, 40, 40))
        );

        getContentPane().add(dashboard, java.awt.BorderLayout.CENTER);

        menu.setBackground(new java.awt.Color(1, 21, 38));
        menu.setPreferredSize(new java.awt.Dimension(800, 50));
        menu.setLayout(new java.awt.BorderLayout());

        leftRegion.setBackground(new java.awt.Color(1, 21, 38));
        leftRegion.setPreferredSize(new java.awt.Dimension(50, 50));

        backIcon.setForeground(new java.awt.Color(255, 255, 255));
        backIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left-arrow.png"))); // NOI18N
        backIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backIconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout leftRegionLayout = new javax.swing.GroupLayout(leftRegion);
        leftRegion.setLayout(leftRegionLayout);
        leftRegionLayout.setHorizontalGroup(
            leftRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftRegionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        leftRegionLayout.setVerticalGroup(
            leftRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftRegionLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(backIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu.add(leftRegion, java.awt.BorderLayout.LINE_START);

        rightRegion.setBackground(new java.awt.Color(1, 21, 38));
        rightRegion.setPreferredSize(new java.awt.Dimension(50, 50));

        exitIcon1.setForeground(new java.awt.Color(255, 255, 255));
        exitIcon1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout.png"))); // NOI18N
        exitIcon1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitIcon1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout rightRegionLayout = new javax.swing.GroupLayout(rightRegion);
        rightRegion.setLayout(rightRegionLayout);
        rightRegionLayout.setHorizontalGroup(
            rightRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightRegionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitIcon1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rightRegionLayout.setVerticalGroup(
            rightRegionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightRegionLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(exitIcon1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu.add(rightRegion, java.awt.BorderLayout.LINE_END);

        getContentPane().add(menu, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backIconMouseClicked
      // TODO add your handling code here:
      this.setVisible(false);
      new screenAdminMenu().setVisible(true);
    }//GEN-LAST:event_backIconMouseClicked

    private void exitIcon1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitIcon1MouseClicked
      // TODO add your handling code here:
      this.setVisible(false);
      new screenLogin().setVisible(true);
    }//GEN-LAST:event_exitIcon1MouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
      int index = usersTable.getSelectedRow();

      if (index >= 0 && index < listaDeUsuarios.size()) {
        listaDeUsuarios.remove(index);
        JOptionPane.showMessageDialog(null, "Remoção realizada com sucesso!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
      }

      carregarTabelaUsuarios();

      editButton.setEnabled(false);
      deleteButton.setEnabled(false);

      try {
        regravarArquivo();
      } catch (IOException erro) {
        System.out.println(erro.getMessage());
        JOptionPane.showMessageDialog(null, "Não foi possível salvar as modificações!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
      }
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_editButtonActionPerformed

    private void editButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseClicked
      if (inputEmail.getText().equals("") || inputUsername.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
      } else if (inputPassword.getPassword().length < 6) {
        JOptionPane.showMessageDialog(null, "A senha deverá ter no mínimo 6 caracteres!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
      } else if (!Arrays.toString(inputPassword.getPassword()).equals(Arrays.toString(inputConfirmPassword.getPassword()))) {
        JOptionPane.showMessageDialog(null, "As senhas devem coincidir!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
      } else {
        String username = inputUsername.getText();
        String email = inputEmail.getText();
        String password = Arrays.toString(inputPassword.getPassword());

        int index = usersTable.getSelectedRow();

        listaDeUsuarios.get(index).setUsername(username);
        listaDeUsuarios.get(index).setEmail(email);
        listaDeUsuarios.get(index).setPassword(password);

        JOptionPane.showMessageDialog(null, "Edição realizada com sucesso!", "Mensagem", JOptionPane.PLAIN_MESSAGE);

        carregarTabelaUsuarios();

        try {
          regravarArquivo();
        } catch (IOException erro) {
          System.out.println(erro.getMessage());
          JOptionPane.showMessageDialog(null, "Não foi possível salvar as modificações!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
        }

        editButton.setEnabled(false);
        deleteButton.setEnabled(false);
      }
    }//GEN-LAST:event_editButtonMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
      if (inputEmail.getText().equals("") || inputUsername.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Todos os campos devem ser inseridos!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
      } else if (inputPassword.getPassword().length < 6) {
        JOptionPane.showMessageDialog(null, "A senha deverá ter no mínimo 6 caracteres!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
      } else if (!Arrays.toString(inputPassword.getPassword()).equals(Arrays.toString(inputConfirmPassword.getPassword()))) {
        JOptionPane.showMessageDialog(null, "As senhas devem coincidir!", "Mensagem", JOptionPane.PLAIN_MESSAGE);
      } else {
        String user = inputUsername.getText();
        String email = inputEmail.getText();
        String senha = Arrays.toString(inputPassword.getPassword());

        try (BufferedReader buffRead = new BufferedReader(new FileReader("users.txt"))) {
          String linha;
          String[] dados;

          while (true) {
            linha = buffRead.readLine();
            if (linha != null) {
              dados = linha.split(";");

              if (dados[0].equals(user)) {
                JOptionPane.showMessageDialog(null, "Usuário já existe!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
                return;
              }

              if (dados[1].equals(email)) {
                JOptionPane.showMessageDialog(null, "E-mail já existe!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
                return;
              }
            } else {
              break;
            }
          }

          buffRead.close();

        } catch (IOException erro) {
          System.out.println(erro.getMessage());

          JOptionPane.showMessageDialog(null, "Não foi possível obter informações dos usuários!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
        }

        listaDeUsuarios.add(new Usuario(user, email, senha, new Date()));
        JOptionPane.showMessageDialog(null, "Usuário cadastrado com sucesso!", "Mensagem", JOptionPane.PLAIN_MESSAGE);

        carregarTabelaUsuarios();
        try {
          regravarArquivo();
        } catch (IOException erro) {
          System.out.println(erro.getMessage());
          JOptionPane.showMessageDialog(null, "Não foi possível salvar as modificações!", "Ocorreu um erro", JOptionPane.PLAIN_MESSAGE);
        }

        inputUsername.setText("");
        inputEmail.setText("");
        inputPassword.setText("");
        inputConfirmPassword.setText("");
      }
    }//GEN-LAST:event_addButtonMouseClicked

    private void usersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersTableMouseClicked
      int i = usersTable.getSelectedRow();

      if (i >= 0 && i < listaDeUsuarios.size()) {
        Usuario usuario = listaDeUsuarios.get(i);
        inputUsername.setText(usuario.getUsername());
        inputEmail.setText(usuario.getEmail());
      }

      addButton.setEnabled(true);
      editButton.setEnabled(true);
      deleteButton.setEnabled(true);
    }//GEN-LAST:event_usersTableMouseClicked

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(screenAdminUserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(screenAdminUserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(screenAdminUserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(screenAdminUserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(() -> {
      new screenAdminUserManagement().setVisible(true);
    });
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel backIcon;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JPanel dashboard;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel exitIcon1;
    private javax.swing.JPasswordField inputConfirmPassword;
    private javax.swing.JTextField inputEmail;
    private javax.swing.JPasswordField inputPassword;
    private javax.swing.JTextField inputUsername;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftRegion;
    private javax.swing.JPanel menu;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPanel rightRegion;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JLabel usersIcon;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables
}
